apply plugin: 'com.android.library'

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion ANDROID_BUILD_MIN_SDK_VERSION
        targetSdkVersion ANDROID_BUILD_TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    // Enable Java 7 features (diamond operator, string switch statements, etc.)
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.squareup.dagger:dagger:1.2.2'
    compile 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile 'com.squareup:otto:1.3.6'
    compile 'com.squareup.picasso:picasso:2.3.4'
    compile 'com.netflix.rxjava:rxjava-android:0.18.2'
    compile 'com.android.support:support-v4:20.0.0'
    compile 'com.squareup.retrofit:retrofit:1.6.1'
}

/**
 * This creates two tasks,
 *
 *    prepareDev
 *    prepareProd
 *
 * Each of the tasks copies files from their respective directories
 * i.e src/dev or src/prod to the src/main direcotry.*/
['dev', 'prod'].each { type ->
    task "prepare${type.capitalize()}"(type: Copy) {
        from("src/${type}")
        into("src/main")
    }
}

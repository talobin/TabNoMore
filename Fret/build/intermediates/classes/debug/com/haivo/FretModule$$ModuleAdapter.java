// Code generated by dagger-compiler.  Do not edit.
package com.haivo;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class FretModule$$ModuleAdapter extends ModuleAdapter<FretModule> {
  private static final String[] INJECTS = { "members/com.haivo.GuitarTunerActivity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { com.haivo.hailibrary.HaiModule.class, };

  public FretModule$$ModuleAdapter() {
    super(com.haivo.FretModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, FretModule module) {
    bindings.contributeProvidesBinding("android.app.Application", new ProvideApplicationProvidesAdapter(module));
  }

  /**
   * A {@code Binding<android.app.Application>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.app.Application>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideApplicationProvidesAdapter extends ProvidesBinding<android.app.Application>
      implements Provider<android.app.Application> {
    private final FretModule module;

    public ProvideApplicationProvidesAdapter(FretModule module) {
      super("android.app.Application", IS_SINGLETON, "com.haivo.FretModule", "provideApplication");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.app.Application>}.
     */
    @Override
    public android.app.Application get() {
      return module.provideApplication();
    }
  }
}
